// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinToolBar uIToolStrip1ToolBar = this.UISpreadsheetWindow.UIToolStrip1Window.UIToolStrip1ToolBar;
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UISpreadsheetProgramWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UISpreadsheetWindowExePath, this.RecordedMethod1Params.UISpreadsheetWindowAlternateExePath);

            // Click 'toolStrip1' tool bar
            Mouse.Click(uIToolStrip1ToolBar, new Point(397, 10));

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod1Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod1Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(141, 36));

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod1Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod1Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(217, 38));

            // Type 'A1+B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod1Params.UICellContentBoxEditText2;

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(48, 15));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UISpreadsheetProgramWindow.UINOWindow.UINOButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UISaveWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UISpreadsheetWindowExePath, this.RecordedMethod2Params.UISpreadsheetWindowAlternateExePath);

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod2Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod2Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(145, 40));

            // Type '4' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod2Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod2Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(226, 40));

            // Type '=A1 + B' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod2Params.UICellContentBoxEditText2;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod2Params.UICellContentBoxEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(35, 20));

            // Type 'A1+B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod2Params.UICellContentBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(276, 39));

            // Type '=C1 + D1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod2Params.UICellContentBoxEditText4;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod2Params.UICellContentBoxEditSendKeys3, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(38, 22));

            // Type 'C1+C1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod2Params.UICellContentBoxEditText5;

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(28, 9));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(58, 14));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(51, 16));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(67, 29));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(34, 13));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(61, 2));

            // Select 'test2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod2Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(48, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 12));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uIPanel4Client = this.UISpreadsheetWindow.UIPanel4Window.UIPanel4Client;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton;
            WinClient uIPanel5Client = this.UISpreadsheetWindow.UIPanel5Window.UIPanel5Client;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIOpenSpreadsheetWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinControl uIItemImage = this.UIOpenSpreadsheetWindow.UIItemWindow.UITest2ListItem.UIItemImage;
            WinButton uIYesButton = this.UISpreadsheetProgramWindow.UIYesWindow.UIYesButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIDesktopTreeItem1 = this.UISaveWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod3Params.UISpreadsheetWindowExePath, this.RecordedMethod3Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 44));

            // Type '3' in 'CellNameBox' text box
            Keyboard.SendKeys(uICellNameBoxEdit, this.RecordedMethod3Params.UICellNameBoxEditSendKeys, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Type '3' in 'CellNameBox' text box
            Keyboard.SendKeys(uICellNameBoxEdit, this.RecordedMethod3Params.UICellNameBoxEditSendKeys1, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Type '3' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod3Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod3Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(168, 35));

            // Type '4' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod3Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod3Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(242, 38));

            // Type '=' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod3Params.UICellContentBoxEditText2;

            // Last mouse action was not recorded.

            // Type 'A' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod3Params.UICellContentBoxEditSendKeys2, ModifierKeys.None);

            // Click 'panel4' client while pressing Shift
            Mouse.Click(uIPanel4Client, MouseButtons.Left, ModifierKeys.Shift, new Point(324, 25));

            // Type 'A1+B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod3Params.UICellContentBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(324, 40));

            // Type 'B1+C1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod3Params.UICellContentBoxEditText4;

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(21, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 5));

            // Click 'panel5' client
            Mouse.Click(uIPanel5Client, new Point(30, 29));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(27, 6));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(43, 11));

            // Double-Click 'Unknown Name' image
            Mouse.DoubleClick(uIItemImage, new Point(16, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(46, 24));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(58, 15));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem1, new Point(52, 13));

            // Select 'test3' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod3Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(24, 7));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(69, 7));
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameBoxEdit;
            WinWindow uICellContentBoxWindow = this.UISpreadsheetWindow.UIPanel4Window.UICellContentBoxWindow;
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIClearButton = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIClearButton;
            WinButton uIHelpButton = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIHelpButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod4Params.UISpreadsheetWindowExePath, this.RecordedMethod4Params.UISpreadsheetWindowAlternateExePath);

            // Type '=' in 'CellNameBox' text box
            Keyboard.SendKeys(uICellNameBoxEdit, this.RecordedMethod4Params.UICellNameBoxEditSendKeys, ModifierKeys.None);

            // Double-Click 'CellContentBox' window
            Mouse.DoubleClick(uICellContentBoxWindow, new Point(80, 0));

            // Type '=A' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod4Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(39, 22));

            // Type '3+2' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(168, 40));

            // Type 'A1+3' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(225, 39));

            // Type '=' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText3;

            // Last mouse action was not recorded.

            // Click 'spreadsheetPanel1' client while pressing Shift
            Mouse.Click(uISpreadsheetPanel1Client, MouseButtons.Left, ModifierKeys.Shift, new Point(224, 39));

            // Type 'B1*3' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText4;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(298, 44));

            // Type '= C' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText5;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod4Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 23));

            // Type '= C1 + D1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText6;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod4Params.UICellContentBoxEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(17, 16));

            // Type '3' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod4Params.UICellContentBoxEditText7;

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(28, 8));

            // Click 'Help' button
            Mouse.Click(uIHelpButton, new Point(22, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(61, 26));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(54, 15));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinClient uIPanel5Client = this.UISpreadsheetWindow.UIPanel5Window.UIPanel5Client;
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetProgramWindow.UINOWindow.UINOButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UISaveWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinListItem uITest3ListItem = this.UISaveWindow.UIItemWindow.UIItemsViewList.UITest3ListItem;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uIHelpButton = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIHelpButton;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UIOpenMenuItem;
            WinToolBar uICommandModuleToolBar = this.UIOpenSpreadsheetWindow.UIExplorerPanePane.UICommandModuleToolBar;
            WinTreeItem uIDesktopTreeItem1 = this.UIOpenSpreadsheetWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIOpenSpreadsheetWindow.UIItemWindow.UITest3ListItem.UINameEdit;
            WinButton uIClearButton = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIClearButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton1 = this.UISpreadsheetWindow2.UISpreadsheetTitleBar.UICloseButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton1 = this.UISpreadsheetProgramWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod5Params.UISpreadsheetWindowExePath, this.RecordedMethod5Params.UISpreadsheetWindowAlternateExePath);

            // Click 'panel5' client
            Mouse.Click(uIPanel5Client, new Point(380, 58));

            // Type '5+5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod5Params.UICellContentBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(170, 50));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(168, 43));

            // Type '=%' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod5Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod5Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(33, 16));

            // Type '5+A1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod5Params.UICellContentBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(217, 46));

            // Type '=A1 + C1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod5Params.UICellContentBoxEditText3;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod5Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(70, 10));

            // Type 'A1+B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod5Params.UICellContentBoxEditText4;

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(41, 5));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(75, 11));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(23, 7));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(46, 14));

            // Click 'test3' list item
            Mouse.Click(uITest3ListItem, new Point(74, 10));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(54, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(58, 10));

            // Click 'Help' button
            Mouse.Click(uIHelpButton, new Point(21, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(35, 6));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(19, 11));

            // Click 'Command Module' tool bar
            Mouse.Click(uICommandModuleToolBar, new Point(74, 38));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem1, new Point(11, 11));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(32, 20));

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(21, 14));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(50, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(32, 15));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(40, 6));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(39, 13));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem1, new Point(53, 12));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(14, 8));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(66, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(50, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(85, 23));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 14));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISpreadsheetProgramWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod6Params.UISpreadsheetWindowExePath, this.RecordedMethod6Params.UISpreadsheetWindowAlternateExePath);

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod6Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod6Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(164, 34));

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod6Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod6Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(221, 39));

            // Type 'A1+B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod6Params.UICellContentBoxEditText2;

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(60, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(71, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(51, 19));
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinWindow uICellContentBoxWindow = this.UISpreadsheetWindow.UIPanel4Window.UICellContentBoxWindow;
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod7Params.UISpreadsheetWindowExePath, this.RecordedMethod7Params.UISpreadsheetWindowAlternateExePath);

            // Double-Click 'CellContentBox' window
            Mouse.DoubleClick(uICellContentBoxWindow, new Point(17, 0));

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod7Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod7Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(127, 39));

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod7Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod7Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(221, 39));

            // Type 'A1+B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod7Params.UICellContentBoxEditText2;
        }
        
        /// <summary>
        /// RecordedMethod8 - Use 'RecordedMethod8Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod8Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod8Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(164, 50));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(164, 43));

            // Type '=A1 + B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod8Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod8Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 12));

            // Type 'A1+A1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod8Params.UICellContentBoxEditText2;
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheetWindow.UICellValueBoxWindow.UICellValueBoxEdit;
            #endregion

            // Verify that 'CellValueBox' text box's property 'Text' equals '10'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod9 - Use 'RecordedMethod9Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(235, 37));

            // Type 'B1+3' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod9Params.UICellContentBoxEditText;
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheetWindow.UICellValueBoxWindow.UICellValueBoxEdit;
            #endregion

            // Verify that 'CellValueBox' text box's property 'Text' equals '13'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod10
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISpreadsheetProgramWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(51, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(47, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(47, 15));
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinEdit uICellContentBoxEdit = this.UISpreadsheetWindow.UICellContentBoxWindow.UICellContentBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinControl uIItemDialog = this.UIItemWindow.UIItemWindow1.UIItemDialog;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UISaveMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UISaveWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem1 = this.UIOpenSpreadsheetWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIOpenSpreadsheetWindow.UIItemWindow.UIBillListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenSpreadsheetWindow.UIOpenWindow.UIOpenSplitButton;
            WinButton uICloseButton = this.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UISpreadsheetProgramWindow.UINOWindow.UINOButton;
            WinButton uIYesButton = this.UISpreadsheetProgramWindow.UIYesWindow.UIYesButton;
            WinButton uIHelpButton = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIHelpButton;
            WinButton uIClearButton = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIClearButton;
            WinButton uICancelButton = this.UISaveWindow.UICancelWindow.UICancelButton;
            WinButton uICancelButton1 = this.UIOpenSpreadsheetWindow.UICancelWindow.UICancelButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem.UINewMenuItem;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uIPanel5Client = this.UISpreadsheetWindow1.UIPanel5Window.UIPanel5Client;
            WinEdit uICellContentBoxEdit1 = this.UISpreadsheetWindow1.UICellContentBoxWindow.UICellContentBoxEdit;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIFileMenuItem.UICloseMenuItem;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIFileMenuItem;
            WinButton uICloseButton1 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod11Params.UISpreadsheetWindowExePath, this.RecordedMethod11Params.UISpreadsheetWindowAlternateExePath);

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod11Params.UICellContentBoxEditText;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod11Params.UICellContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(146, 41));

            // Type '5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod11Params.UICellContentBoxEditText1;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod11Params.UICellContentBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(218, 45));

            // Type 'A1+B1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod11Params.UICellContentBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(291, 36));

            // Type 'C1+5' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod11Params.UICellContentBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(390, 36));

            // Type '=E1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod11Params.UICellContentBoxEditText4;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod11Params.UICellContentBoxEditSendKeys2, ModifierKeys.None);

            // Click 'Unknown Name' Dialog
            Mouse.Click(uIItemDialog, new Point(354, 120));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(62, 13));

            // Type '=F1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod11Params.UICellContentBoxEditText5;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit, this.RecordedMethod11Params.UICellContentBoxEditSendKeys3, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(24, 10));

            // Type 'A1' in 'CellContentBox' text box
            uICellContentBoxEdit.Text = this.RecordedMethod11Params.UICellContentBoxEditText6;

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(43, 21));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(40, 13));

            // Select 'bill' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod11Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(68, 18));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(65, 19));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem1, new Point(62, 20));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(16, 15));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(22, 22));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(44, 10));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(52, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(9, 1));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(31, 18));

            // Click 'Help' button
            Mouse.Click(uIHelpButton, new Point(21, 5));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(64, 19));

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(16, 16));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(40, 11));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(35, 16));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(38, 3));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(29, 18));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(36, 17));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(454, 115));

            // Click 'panel5' client
            Mouse.Click(uIPanel5Client, new Point(414, 58));

            // Type '6' in 'CellContentBox' text box
            uICellContentBoxEdit1.Text = this.RecordedMethod11Params.UICellContentBoxEditText7;

            // Type '{Enter}' in 'CellContentBox' text box
            Keyboard.SendKeys(uICellContentBoxEdit1, this.RecordedMethod11Params.UICellContentBoxEditSendKeys4, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(55, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(45, 11));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(59, 17));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(16, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(42, 7));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod9Params RecordedMethod9Params
        {
            get
            {
                if ((this.mRecordedMethod9Params == null))
                {
                    this.mRecordedMethod9Params = new RecordedMethod9Params();
                }
                return this.mRecordedMethod9Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISpreadsheetProgramWindow UISpreadsheetProgramWindow
        {
            get
            {
                if ((this.mUISpreadsheetProgramWindow == null))
                {
                    this.mUISpreadsheetProgramWindow = new UISpreadsheetProgramWindow();
                }
                return this.mUISpreadsheetProgramWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow();
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIOpenSpreadsheetWindow UIOpenSpreadsheetWindow
        {
            get
            {
                if ((this.mUIOpenSpreadsheetWindow == null))
                {
                    this.mUIOpenSpreadsheetWindow = new UIOpenSpreadsheetWindow();
                }
                return this.mUIOpenSpreadsheetWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UISpreadsheetWindow2 UISpreadsheetWindow2
        {
            get
            {
                if ((this.mUISpreadsheetWindow2 == null))
                {
                    this.mUISpreadsheetWindow2 = new UISpreadsheetWindow2();
                }
                return this.mUISpreadsheetWindow2;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod9Params mRecordedMethod9Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISpreadsheetProgramWindow mUISpreadsheetProgramWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UISaveWindow mUISaveWindow;
        
        private UIOpenSpreadsheetWindow mUIOpenSpreadsheetWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UISpreadsheetWindow2 mUISpreadsheetWindow2;
        
        private UIItemWindow4 mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1 + B' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "=A1 + B";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText3 = "A1+B1";
        
        /// <summary>
        /// Type '=C1 + D1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText4 = "=C1 + D1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'C1+C1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText5 = "C1+C1";
        
        /// <summary>
        /// Select 'test2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '3' in 'CellNameBox' text box
        /// </summary>
        public string UICellNameBoxEditSendKeys = "3";
        
        /// <summary>
        /// Type '3' in 'CellNameBox' text box
        /// </summary>
        public string UICellNameBoxEditSendKeys1 = "3";
        
        /// <summary>
        /// Type '3' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "=";
        
        /// <summary>
        /// Type 'A' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys2 = "A";
        
        /// <summary>
        /// Type 'A1+B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText3 = "A1+B1";
        
        /// <summary>
        /// Type 'B1+C1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText4 = "B1+C1";
        
        /// <summary>
        /// Select 'test3' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=' in 'CellNameBox' text box
        /// </summary>
        public string UICellNameBoxEditSendKeys = "=";
        
        /// <summary>
        /// Type '=A' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "=A";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3+2' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "3+2";
        
        /// <summary>
        /// Type 'A1+3' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "A1+3";
        
        /// <summary>
        /// Type '=' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText3 = "=";
        
        /// <summary>
        /// Type 'B1*3' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText4 = "B1*3";
        
        /// <summary>
        /// Type '= C' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText5 = "= C";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '= C1 + D1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText6 = "= C1 + D1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText7 = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5+5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "5+5";
        
        /// <summary>
        /// Type '=%' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "=%";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5+A1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "5+A1";
        
        /// <summary>
        /// Type '=A1 + C1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText3 = "=A1 + C1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText4 = "A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1 + B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "=A1 + B1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+A1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "A1+A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CellValueBox' text box's property 'Text' equals '10'
        /// </summary>
        public string UICellValueBoxEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod9Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'B1+3' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "B1+3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CellValueBox' text box's property 'Text' equals '13'
        /// </summary>
        public string UICellValueBoxEditText = "13";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Azelos\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText1 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText2 = "A1+B1";
        
        /// <summary>
        /// Type 'C1+5' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText3 = "C1+5";
        
        /// <summary>
        /// Type '=E1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText4 = "=E1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=F1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText5 = "=F1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type 'A1' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText6 = "A1";
        
        /// <summary>
        /// Select 'bill' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "bill";
        
        /// <summary>
        /// Type '6' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditText7 = "6";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentBox' text box
        /// </summary>
        public string UICellContentBoxEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIToolStrip1Window UIToolStrip1Window
        {
            get
            {
                if ((this.mUIToolStrip1Window == null))
                {
                    this.mUIToolStrip1Window = new UIToolStrip1Window(this);
                }
                return this.mUIToolStrip1Window;
            }
        }
        
        public UICellContentBoxWindow UICellContentBoxWindow
        {
            get
            {
                if ((this.mUICellContentBoxWindow == null))
                {
                    this.mUICellContentBoxWindow = new UICellContentBoxWindow(this);
                }
                return this.mUICellContentBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIToolStrip1ToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIPanel4Window UIPanel4Window
        {
            get
            {
                if ((this.mUIPanel4Window == null))
                {
                    this.mUIPanel4Window = new UIPanel4Window(this);
                }
                return this.mUIPanel4Window;
            }
        }
        
        public UIPanel5Window UIPanel5Window
        {
            get
            {
                if ((this.mUIPanel5Window == null))
                {
                    this.mUIPanel5Window = new UIPanel5Window(this);
                }
                return this.mUIPanel5Window;
            }
        }
        
        public UICellValueBoxWindow UICellValueBoxWindow
        {
            get
            {
                if ((this.mUICellValueBoxWindow == null))
                {
                    this.mUICellValueBoxWindow = new UICellValueBoxWindow(this);
                }
                return this.mUICellValueBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIToolStrip1Window mUIToolStrip1Window;
        
        private UICellContentBoxWindow mUICellContentBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UIToolStrip1ToolBar mUIToolStrip1ToolBar;
        
        private UIA1Window mUIA1Window;
        
        private UIPanel4Window mUIPanel4Window;
        
        private UIPanel5Window mUIPanel5Window;
        
        private UICellValueBoxWindow mUICellValueBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIToolStrip1Window : WinWindow
    {
        
        public UIToolStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "toolStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIToolStrip1ToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
                    this.mUIToolStrip1ToolBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIToolStrip1ToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellContentBoxWindow : WinWindow
    {
        
        public UICellContentBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentBoxEdit
        {
            get
            {
                if ((this.mUICellContentBoxEdit == null))
                {
                    this.mUICellContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIToolStrip1ToolBar : WinToolBar
    {
        
        public UIToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "Clear";
                    this.mUIClearButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        
        public WinButton UIHelpButton
        {
            get
            {
                if ((this.mUIHelpButton == null))
                {
                    this.mUIHelpButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIHelpButton.SearchProperties[WinButton.PropertyNames.Name] = "Help";
                    this.mUIHelpButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIHelpButton;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinButton mUIClearButton;
        
        private WinButton mUIHelpButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellNameBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel4Window : WinWindow
    {
        
        public UIPanel4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel4";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UIPanel4Client
        {
            get
            {
                if ((this.mUIPanel4Client == null))
                {
                    this.mUIPanel4Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanel4Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIPanel4Client;
            }
        }
        
        public WinWindow UICellContentBoxWindow
        {
            get
            {
                if ((this.mUICellContentBoxWindow == null))
                {
                    this.mUICellContentBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICellContentBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUICellContentBoxWindow.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanel4Client;
        
        private WinWindow mUICellContentBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel5Window : WinWindow
    {
        
        public UIPanel5Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel5";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UIPanel5Client
        {
            get
            {
                if ((this.mUIPanel5Client == null))
                {
                    this.mUIPanel5Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanel5Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIPanel5Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanel5Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellValueBoxWindow : WinWindow
    {
        
        public UICellValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValueBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueBoxEdit
        {
            get
            {
                if ((this.mUICellValueBoxEdit == null))
                {
                    this.mUICellValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetProgramWindow : WinWindow
    {
        
        public UISpreadsheetProgramWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SpreadsheetProgram";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("SpreadsheetProgram");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("SpreadsheetProgram");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("SpreadsheetProgram");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("SpreadsheetProgram");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("SpreadsheetProgram");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIToolStrip1ToolBar1 UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar1(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UISpreadsheetTitleBar1 UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar1(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIPanel5Window1 UIPanel5Window
        {
            get
            {
                if ((this.mUIPanel5Window == null))
                {
                    this.mUIPanel5Window = new UIPanel5Window1(this);
                }
                return this.mUIPanel5Window;
            }
        }
        
        public UICellContentBoxWindow1 UICellContentBoxWindow
        {
            get
            {
                if ((this.mUICellContentBoxWindow == null))
                {
                    this.mUICellContentBoxWindow = new UICellContentBoxWindow1(this);
                }
                return this.mUICellContentBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIToolStrip1ToolBar1 mUIToolStrip1ToolBar;
        
        private UISpreadsheetTitleBar1 mUISpreadsheetTitleBar;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIPanel5Window1 mUIPanel5Window;
        
        private UICellContentBoxWindow1 mUICellContentBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIToolStrip1ToolBar1 : WinToolBar
    {
        
        public UIToolStrip1ToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[WinButton.PropertyNames.Name] = "Clear";
                    this.mUIClearButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        
        private WinButton mUIClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel5Window1 : WinWindow
    {
        
        public UIPanel5Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "panel5";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UIPanel5Client
        {
            get
            {
                if ((this.mUIPanel5Client == null))
                {
                    this.mUIPanel5Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIPanel5Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIPanel5Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIPanel5Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellContentBoxWindow1 : WinWindow
    {
        
        public UICellContentBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentBoxEdit
        {
            get
            {
                if ((this.mUICellContentBoxEdit == null))
                {
                    this.mUICellContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow1 UISaveWindow1
        {
            get
            {
                if ((this.mUISaveWindow1 == null))
                {
                    this.mUISaveWindow1 = new UISaveWindow1(this);
                }
                return this.mUISaveWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow1 mUISaveWindow1;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinListItem UITest3ListItem
        {
            get
            {
                if ((this.mUITest3ListItem == null))
                {
                    this.mUITest3ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUITest3ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "test3";
                    this.mUITest3ListItem.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUITest3ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUITest3ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenSpreadsheetWindow : WinWindow
    {
        
        public UIOpenSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow1 UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow1(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIExplorerPanePane UIExplorerPanePane
        {
            get
            {
                if ((this.mUIExplorerPanePane == null))
                {
                    this.mUIExplorerPanePane = new UIExplorerPanePane(this);
                }
                return this.mUIExplorerPanePane;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow1 mUITreeViewWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIExplorerPanePane mUIExplorerPanePane;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewWindow1 : WinWindow
    {
        
        public UITreeViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree1 UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree1(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree1 mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITreeViewTree1 : WinTree
    {
        
        public UITreeViewTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem1 UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem1(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem1 mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFavoritesTreeItem1 : WinTreeItem
    {
        
        public UIFavoritesTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITest2ListItem UITest2ListItem
        {
            get
            {
                if ((this.mUITest2ListItem == null))
                {
                    this.mUITest2ListItem = new UITest2ListItem(this);
                }
                return this.mUITest2ListItem;
            }
        }
        
        public UITest3ListItem UITest3ListItem
        {
            get
            {
                if ((this.mUITest3ListItem == null))
                {
                    this.mUITest3ListItem = new UITest3ListItem(this);
                }
                return this.mUITest3ListItem;
            }
        }
        
        public UIBillListItem UIBillListItem
        {
            get
            {
                if ((this.mUIBillListItem == null))
                {
                    this.mUIBillListItem = new UIBillListItem(this);
                }
                return this.mUIBillListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest2ListItem mUITest2ListItem;
        
        private UITest3ListItem mUITest3ListItem;
        
        private UIBillListItem mUIBillListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITest2ListItem : WinListItem
    {
        
        public UITest2ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    this.mUIItemImage.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITest3ListItem : WinListItem
    {
        
        public UITest3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test3";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBillListItem : WinListItem
    {
        
        public UIBillListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bill";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExplorerPanePane : WinPane
    {
        
        public UIExplorerPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Explorer Pane";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinToolBar UICommandModuleToolBar
        {
            get
            {
                if ((this.mUICommandModuleToolBar == null))
                {
                    this.mUICommandModuleToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUICommandModuleToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Command Module";
                    this.mUICommandModuleToolBar.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUICommandModuleToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUICommandModuleToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetWindow2 : WinWindow
    {
        
        public UISpreadsheetWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetTitleBar2 UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar2(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetTitleBar2 mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetTitleBar2 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    #endregion
                }
                return this.mUIItemDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDialog;
        #endregion
    }
}
